Документація по проекту
1. Опис проекту
Проект є веб-додатком на основі шаблону Aven Template, який включає в себе інтеграцію двох форм для збору заявок. Додаток забезпечує:

Інтеграцію з Facebook Pixel та Google Analytics.
Відправку даних з форм через AJAX.
Серверну обробку з валідацією даних та збереженням у базу даних SQLite.
Захист від CSRF, XSS та SQL-ін’єкцій.
Логування запитів.
Адаптивний дизайн та повідомлення про успіх через модальне вікно.
2. Структура проекту
Коренева папка
index.php — головна сторінка проекту.
form-handler.php — серверний обробник форм.
functions.php — функції для роботи з базою даних.
.htaccess — налаштування для кешування статичних файлів.
Папки
css/ — стилі проекту.
js/ — скрипти проекту:
custom.js — основна логіка фронтенду.
db/ — база даних SQLite (database.sqlite).
inc/ — налаштування бази даних.
logs/ — файли логування:
form_requests.log — журнал запитів.
images/ — зображення проекту.
uploads/ — медіа-файли для галереї.
3. Встановлення та запуск
Вимоги
PHP 7.4 або вище.
Веб-сервер (Apache).
SQLite.
Кроки для встановлення
Скопіюйте файли проекту у директорію вашого веб-сервера (наприклад, htdocs для XAMPP).
Переконайтесь, що PHP має доступ до розширення SQLite.
Переконайтесь, що директорії db/ та logs/ мають права запису.
Налаштуйте веб-сервер для роботи з .htaccess для кешування файлів.
Запуск
Відкрийте проект у веб-браузері за URL, наприклад, http://localhost/ .
Для перевірки роботи форм відправте дані з будь-якої з них.
4. Опис функціоналу
4.1. Відправка форм
Форма "Get an Appointment" (#contactform).
Форма "Quick Appointment" (#contactform1).
Дані надсилаються через AJAX-запит до form-handler.php.
При успішній обробці:
Виводиться модальне вікно з повідомленням.
Викликається трек-івент у Facebook Pixel та Google Analytics.
При помилках:
Повідомлення відображається без перезавантаження сторінки.
Файли: custom.js, form-handler.php.

4.2. Логування
Усі запити до form-handler.php логуються у logs/form_requests.log.
Лог містить:
Час запиту.
Результат запиту (успіх чи помилка).
IP-адресу користувача.
Файли: form-handler.php.

4.3. Збереження у базу даних
Дані з форм зберігаються у таблицю contacts.
Структура таблиці:
id — ідентифікатор.
name — ім'я та прізвище.
email — електронна пошта.
phone — телефон.
service — обраний сервіс.
price — ціновий діапазон.
comments — коментарі.
geo_data — геодані у форматі JSON.
created_at — час створення запису.
Файли: functions.php, form-handler.php.

4.4. Захист
CSRF
Токен генерується на сервері у index.php.
Перевіряється у form-handler.php перед обробкою запиту.
XSS
Дані, які вводить користувач, проходять через htmlspecialchars() у PHP.
Клієнтська валідація виконується перед відправкою.
SQL-ін’єкції
Використовуються підготовлені SQL-запити через PDO.
Файли: index.php, custom.js, form-handler.php, functions.php.

4.5. Адаптивний дизайн
Шаблон підтримує адаптивний дизайн, коректно працює на мобільних пристроях.
Модальне вікно повідомлення (#successModal) з'являється після успішного запиту.
Файли: index.php, css/.

4.6. Кешування
Налаштовано через .htaccess для статичних файлів:
CSS, JS, зображення.
Додає заголовки Cache-Control та Expires.
Файли: .htaccess.

5. Додаткові примітки
Всі форми перевіряються як на клієнтській, так і на серверній стороні.
Логіка форм чітко розділена між клієнтським та серверним кодом.
Усі функції коду задокументовані для полегшення підтримки.
6. API
Вхідні дані
POST-запит з полями:
first_name — ім'я.
last_name — прізвище.
email — електронна пошта.
phone — телефон.
select_service — вибраний сервіс.
select_price — ціновий діапазон.
comments — коментарі (необов’язкове).
csrf_token — CSRF-токен.
Вихідні дані
JSON-відповідь:
success — успішність обробки.
message — повідомлення для користувача.
redirectUrl — URL для редиректу (опціонально).
7. Підтримка
У разі запитань чи проблем із запуском проекту, звертайтесь за email: v.kurdybailo@gmail.com.